Task 1:

c)

(i)
Try looking at general feedback for this one.

(ii)
example:
Exp TIMES Exp
$ are indicating which number of token in the string.
Say $1 would refer to the first expression.
ID
#1 $1 will give me a string, which is the first thing saved in a tuple. The token ID is defined to contain a string and a position.


Task 2:

a)
Forall alpha should be the first thing.
Otherwise it is correct.

b)
and forth check general feedback.
If i missed something poke me for help.

re-submit:
to pass:
Fix Task 1 and 2,
take a look at the general feedback for task 3.
It is fairly simple.


::::General feedback::::
Task 1:

c)

(i)

%left, %right, %nonassoc describes associativity.
Which side does the function evaluate first, when it comes to recursive evaluation.
"PLUS" will first check left argument, then right.
Precedens order:
%nonassoc letprec # weakest binding
%left OR #
%left AND #
%left DEQ LTH #
%left PLUS MINUS # strongest binding


(ii)

Exp Times Exp
$ refers to a position.
$2 will refer to Times.
ID
# refers to the argument place in a tuple.
#1 $1 is a string.
It takes the first argument in the tuple from the first argument.


Task 2:

a)

Try looking into the slides about type-checking, 20/48.
There is something simular under the name Type Rules.
The example of Map.
Consider that example and realize that it is sort of the same with filter.
Only thing is that the function it takes is returning bool, and the list returned is the same type as it takes in.

b)
Use the sort of notation as on page 111 and 113,
for initial inspiration.
Think back of when we evaluated expressions,
and now we just want to evaluate types.
Step 1:
Check the array type
Step 2:
check the function output type, and input type.
If output type is not of type bool, raise an error.
Step 3:
Compare input type, with array type.
If types don't match, raise an error.
Step 4:
Return the array and type of elements.

c)
Here the work from before is partially done already.
We have
input type = id_type_lst
return type = ret_type.
You want to evaluate the body of the lambda function.
If that body evaluates to boolean,
and the return type evaluates to boolean then you win.

Task 3:

The algorithm walkthrough, it is found in slides Type-checking 35/48.
First step:
If you find a common constructor(an operator)
Second step:
You check the left subtree, in both trees.
Third step:
You check the right subtree, in both trees.
Representative means, that it has a specific type.
List is also considered a representative.
If a list have specific representative (int, char, bool, list),
a polymorphic node should inherit every child in the subtree.